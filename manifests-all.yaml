# Derived from ./manifests
---
apiVersion: v1
kind: Namespace
metadata:
  name: logging
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: curator-config
  namespace: logging
data:
  action_file.yml: |-
    ---
    # Remember, leave a key empty if there is no value.  None will be a string,
    # not a Python "NoneType"
    #
    # Also remember that all examples have 'disable_action' set to True.  If you
    # want to use this action as a template, be sure to set this to False after
    # copying it.
    actions:
      1:
        action: delete_indices
        description: "Clean up ES by deleting old indices"
        options:
          timeout_override:
          continue_if_exception: False
          disable_action: False
        filters:
        - filtertype: age
          source: name
          direction: older
          timestring: '%Y.%m.%d'
          unit: days
          unit_count: 3
          field:
          stats_result:
          epoch:
          exclude: False
  config.yml: |-
    ---
    # Remember, leave a key empty if there is no value.  None will be a string,
    # not a Python "NoneType"
    client:
      hosts:
        - elasticsearch
      port: 9200
      url_prefix:
      use_ssl: False
      certificate:
      client_cert:
      client_key:
      ssl_no_validate: False
      http_auth:
      timeout: 30
      master_only: False

    logging:
      loglevel: INFO
      logfile:
      logformat: default
      blacklist: ['elasticsearch', 'urllib3']
---
apiVersion: batch/v2alpha1
kind: CronJob
metadata:
  name: curator
  namespace: logging
spec:
  schedule: 1 0 * * *
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: curator
            image: bobrik/curator
            args: ["--config", "/etc/config/config.yml", "/etc/config/action_file.yml"]
            volumeMounts:
              - name: config-volume
                mountPath: /etc/config
          volumes:
            - name: config-volume
              configMap:
                name: curator-config
          restartPolicy: OnFailure---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: logging
spec:
  template:
    metadata:
      labels:
        component: elasticsearch
        role: master
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
          {
          "name": "sysctl",
            "image": "busybox",
            "command": ["sysctl", "-w", "vm.max_map_count=262144"],
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "privileged": true
            }
          }
        ]'
    spec:
      containers:
      - name: elasticsearch
        securityContext:
          privileged: true
          capabilities:
            add:
              - IPC_LOCK
        image: elasticsearch:5
        # imagePullPolicy: Always
        env:
        - name: "ES_JAVA_OPTS"
          value: "-Xms1g -Xmx1g"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: "CLUSTER_NAME"
          value: "myesdb"
        - name: NODE_MASTER
          value: "true"
        - name: NODE_DATA
          # value: "false"
          value: "true"
        - name: HTTP_ENABLE
          # value: "false"
          value: "true"
        ports:
        - containerPort: 9200
          name: api
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - name: storage
          mountPath: /data
      volumes:
          - emptyDir:
              medium: ""
            name: "storage"
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: logging
  labels:
    component: elasticsearch
spec:
  type: NodePort
  ports:
  - port: 9200
    protocol: TCP
    targetPort: api
  selector:
    component: elasticsearch
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat
  namespace: logging
  labels:
    component: filebeat
data:
  filebeat.yml: |
    filebeat.prospectors:
    - input_type: log
      paths:
      - /var/log/*.log

    - input_type: log
      paths:
      - /hostfs/var/lib/docker/containers/*/*-json.log
      tags:
      - docker
      json.keys_under_root: false
      json.message_key: log
      json.add_error_key: true
      # json.keys_under_root: true

    output.elasticsearch:
      hosts: ["elasticsearch:9200"]
      template.enabled: true
      template.name: "filebeat"
      template.path: "filebeat.template.json"
      template.overwrite: false

    # Sets log level. The default log level is error.
    # Available log levels are: critical, error, warning, info, debug
    logging.level: info
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: logging
spec:
  template:
    metadata:
      labels:
        component: filebeat
    spec:
      containers:
      - image: giantswarm/filebeat:5.2.0
        name: filebeat
        env:
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
          requests:
            cpu: 100m
        volumeMounts:
        - name: containers
          mountPath: /hostfs/var/lib/docker/containers
        # - name: hostlog
        #   mountPath: /varlog
        - name: config-volume
          mountPath: /etc/filebeat
      volumes:
      - name: containers
        hostPath:
          path: /var/lib/docker/containers
      # - name: hostlog
      #   hostPath:
      #     path: /var/log
      - name: config-volume
        configMap:
          name: filebeat
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kibana
  namespace: logging
spec:
  replicas: 1
  template:
    metadata:
      labels:
        component: kibana
    spec:
      containers:
      - name: kibana
        # image: gcr.io/google_containers/kibana:1.3
        image: kibana:5
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
          requests:
            cpu: 100m
        env:
          - name: "ELASTICSEARCH_URL"
            value: "http://elasticsearch:9200"
        ports:
        - containerPort: 5601
          name: ui
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: logging
  labels:
    component: kibana
spec:
  type: NodePort
  ports:
  - port: 5601
    protocol: TCP
    targetPort: ui
  selector:
    component: kibana
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-events
  namespace: logging
  labels:
    app: kube-events
spec:
  template:
    metadata:
      labels:
        app: kube-events
    spec:
      containers:
      - name: kube-events
        image: giantswarm/tiny-tools
        imagePullPolicy: Always
        command:
        - fish
        - --command
        - |
          set kube_token (cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          curl --silent --fail --show-error --insecure --header "Authorization: Bearer $kube_token" \
            --request GET https://kubernetes.default.svc/api/v1/watch/events \
              | jq -c '.' | while read -l event
            set -l index "kube-events-"(date --utc -I)
            curl --request POST http://elasticsearch.logging.svc:9200/$index/event --data "$event"
          end
